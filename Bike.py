import streamlit as st
import geopandas as gpd
import seaborn as sns
import pandas as pd
import json
import numpy as np
import matplotlib.pyplot as plt
#import plotly.express as px
from streamlit_option_menu import option_menu
#from numerize.numerize import numerize
import folium
from streamlit_folium import folium_static
#from streamlit_folium import st_folium
import joblib
from joblib import load
#import pickle5 as pickle
import xgboost as xgb
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
#from sklearn.model_selection import GridSearchCV, TimeSeriesSplit, cross_val_score
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
from sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor
import plost
from sklearn.linear_model import LinearRegression, RidgeCV
#import pandas_profiling
#from query import *
from time import time

st.set_page_config(page_title="Comptage de v√©lo √† Paris",page_icon="üåç",layout="wide")
st.image('graph_00.png')
st.write("<h4 style=text-align:center;>Analyse des donn√©es de trafic des üö¥ √† Paris</h4>", unsafe_allow_html=True)

#st.markdown("##")

theme_plotly = None # None or streamlit

#Cr√©er la page Web pour comptage v√©lo
st.sidebar.header("Paris, ville 100 % cyclable üö≤")
st.sidebar.image("compteurs_de_v√©lo_01.jpg",caption="Developed and Maintaned by: Mohamed Arrar, Wilfried Dartois, Li-Hsiang Hsu")



pages=["√Ä propos", 'Projet', 'Jeux de donn√©es', 'DataViz', 'Mod√©lisation', 'Entra√Ænez votre mod√®le : √Ä vous de jouer !', 'Interpr√©tabilit√©', 'Bilan et perspective']
with st.sidebar:
    selected = option_menu("Menu principal", pages, icons=['house'], menu_icon="cast", default_index=1)
    

st.sidebar.header("üö¥‚Äç‚ôÄÔ∏èFaire du v√©lo √† Parisüö¥‚Äç‚ôÄÔ∏è")


if selected == '√Ä propos' : 
    st.write("")
    st.write("<h1 style=text-align:center;>Projet</h1>", unsafe_allow_html=True)
    st.write("<h1 style=text-align:center;>Comptage de v√©lo √† Paris</h1>", unsafe_allow_html=True)
    st.write("<h2 style=text-align:center;>Formation Data Analyst de DataScientest.com</h2>", unsafe_allow_html=True)
    st.write("<h3 style=text-align:center;>du janvier au septembre 2023</h3>", unsafe_allow_html=True)
    st.write("<h1 style=text-align:center;>Auteurs:</h1>", unsafe_allow_html=True)
    st.write("<h2 style=text-align:center;>Mohamed Arrar</h2>", unsafe_allow_html=True)
    st.write("<h2 style=text-align:center;>Wilfried Dartois</h2>", unsafe_allow_html=True)
    st.write("<h2 style=text-align:center;>Li-Hsiang Hsu</h2>", unsafe_allow_html=True)

    #st.write("<h4 style=text-align:center;>Analyse des donn√©es de trafic üö¥ √† Paris</h4>", unsafe_allow_html=True)

elif selected == 'Projet':
    st.write("")
    #st.image('compteurs_de_v√©lo.jpg')
    # Plan de Paris
    #m = folium.Map(location = [48.856578, 2.351828], zoom_start = 12)
    #folium.Marker(location=[48.856578, 2.351828]).add_to(m)
    #plan_paris = st_folium(m, width=725)
    #Description du projet
    st.write("<h2 style=text-align:center;>Projet</h2>", unsafe_allow_html=True)
    st.write("Il s'agit d'un rapport d'exploration, de visualisation de donn√©es et de pr√©-traitement pour un projet de la ville de Paris qui vise √† utiliser les donn√©es provenant de compteurs de v√©lo permanents pour identifier les zones de forte circulation pendant des p√©riodes sp√©cifiques n√©cessitant diff√©rents besoins en termes d'infrastructures, de r√©novation ou de s√©curit√©. ")
    st.write("L'objectif est de comprendre l'√©volution du trafic cycliste en fonction des secteurs de la ville et des p√©riodes cl√©s, ainsi que les facteurs qui influencent le choix entre le v√©lo, la voiture et les transports en commun.")
    st.write("")
    st.write("")
    if st.checkbox("Afficher les biblioth√®ques utilis√©es") :
        st.write("Biblioth√®ques utilis√©es")
        st.image('biblio.png')
elif selected == "Jeux de donn√©es":
    st.write("")
    st.write("<h2 style=text-align:center;>Jeux de donn√©es et pr√©-traitement</h2>", unsafe_allow_html=True)
    
     
    st.write("")
    #st.write("<h3 style=text-align:center;>Pr√©-traitement</h3>", unsafe_allow_html=True)
    
    st.write("")
    st.image('Pre_processing.jpg')
    st.write("<h5 style=text-align:center;>Les √©tapes de pr√©-traitement</h5>", unsafe_allow_html=True)
    st.write("")
    st.write("")
    if st.checkbox("Afficher les √©tapes d√©taill√©ees:") :
        st.write("")
        st.write("‚û¢	Ajout/Modification de variables au jeu de donn√©es principal")
        st.write("‚Ä¢ P√©riodicit√© : Month, Weekday, Weeknum, Year, Day‚Ä¶")
        st.write("‚Ä¢	Ev√®nement dans la ville (Gr√®ve, Manifestation gilets jaunes, p√©nurie d‚Äôessence)")
        st.write("‚Ä¢	Donn√©es g√©ographique : Arrondissement, Longitude, Latitude")
        st.write("‚Ä¢	Informations m√©t√©orologique : Opinion_weather")
        st.write("‚û¢	R√©organisation des colonnes et suppression des colonnes manquantes")
        st.write("‚û¢	Filtre des donn√©es sur une ann√©e compl√®te")
        st.write("‚û¢	Traitement des donn√©es")
        st.write("‚Ä¢	Valeurs manquante : Les valeurs manquantes du fichier n‚Äôont aucun impact sur notre travail car elles se trouvent dans des colonnes que nous n‚Äôutilisons pas.")
        st.write("‚Ä¢	Outliers : Nous avions constat√© gr√¢ce √† une analyse sur les outliers une erreur qui en approfondissement sont dues √† une panne du compteur localis√© au ¬´ 39 quai Fran√ßois Mauriac ¬ª sur le mois d‚Äôao√ªt uniquement. Nous avons donc fait le choix d‚Äôextraire de notre Dataframe les donn√©es cit√©s ci-dessus.")
        st.write("")
        st.image('outliers.png')
        st.write("")
        st.write("")
    st.write("<h2 style=text-align:center;>Explorez nos jeux de donn√©es en profondeur</h2>", unsafe_allow_html=True)
    st.write("")
    st.write("")    
    choix_df = ['Rien, merci !',
                'Sources de donn√©es', 
                'Jeu de donn√©es pour DataViz', 
                'Jeux de donn√©es pour mod√©lisation']
    disply_df = st.radio('Que souhaitez-vous explorer ?', choix_df)
    

    if disply_df == 'Non, merci!':
        st.write("")
        
    if disply_df == 'Sources de donn√©es':
        st.write("Vous avez choisi : Sources de donn√©es")
        #st.image('Viz_00.png')
        st.write("<h5 style=text-align:center;>Sources de donn√©es :</h5>", unsafe_allow_html=True)

        link1 = "https://opendata.paris.fr/explore/dataset/comptage-velo-donnees-compteurs/information/?disjunctive.id_compteur&disjunctive.nom_compteur&disjunctive.id&disjunctive.name"
        text1 = "Comptage v√©lo: Donn√©es compteurs de la Ville de Paris"
        link2 = "https://www.historique-meteo.net/"
        text2 = "Donn√©es m√©t√©o : Historique M√©t√©o"
        st.write(f'<h5 style="text-align:center;"><a href="{link1}" target="_blank">{text1}</a></h5>', unsafe_allow_html=True)
        st.write(f'<h5 style="text-align:center;"><a href="{link2}" target="_blank">{text2}</a></h5>', unsafe_allow_html=True)
        st.write("")
    
        st.write("<h3 style=;>‚û¢	Donn√©es de comptage de v√©lo :</h3>", unsafe_allow_html=True)
        st.write("Les donn√©es exploit√©es sont en open data et donc libre acc√®s pour une utilisation appropri√©e. Le poids de notre jeu de donn√©es est de 1,15 Go, comprenant 16 colonnes et 724 467 lignes.")
        st.write("Les variables les plus pertinentes pour nos objectifs incluent le nom du compteur, la date et l'heure de comptage en tant que variable temporelle, la date d'installation du site de comptage pour expliquer la diff√©rence de la variable de comptage sur une p√©riode longue, les coordonn√©es g√©ographiques pour la localisation pr√©cise sur une cartographie et la r√©alisation de statistiques de moyenne par arrondissement, et le mois et l'ann√©e du comptage pour le regroupement des valeurs.")
        st.write("La variable cible de notre projet est le comptage horaire.")
        st.write("Afin d‚Äôappr√©hender les enjeux et objectifs de notre projet nous avons int√©gr√© un ensemble de jeux de donn√©es qui sont les suivants : ")
        st.write("<h3 style=;>‚û¢	M√©t√©o de Paris sur l‚Äôann√©e 2022 :</h3>", unsafe_allow_html=True)
        st.write("L‚Äôobjectif de ce fichier √©tait de nous permettre d‚Äôobtenir la m√©t√©o sur la ville pour chaque jour de l‚Äôann√©e 2022. Cela va nous permettre d‚Äôidentifier son impact sur notre jeux de donn√©es de base.")
        st.write("<h3 style=;>‚û¢	Arrondissement :</h3>", unsafe_allow_html=True)
        st.write("Le fichier contenant les arrondissement nous a permis de situer sur une carte chaque compteur et de les regrouper par arrondissement ce qui permet de faire une analyse en fonction de l‚Äôutilisation des v√©los pour chaque zone de la ville de Paris")
        st.write("<h3 style=;>‚û¢	√âv√©nement en Ile De France : :</h3>", unsafe_allow_html=True)
        st.write("Ce fichier regroupe toutes les gr√®ves de transport de la RATP, Manifestations sociales et p√©nurie d‚Äôessence de l‚Äôann√©e 2022. Nous pourrons donc voir comme pour le fichier de la m√©t√©o l‚Äôimpact que chaque √©v√®nement aura eu sur l‚Äôutilisation d‚Äôun v√©lo comme moyen de transport.")
        
    if disply_df == 'Jeu de donn√©es pour DataViz':
        st.write("Vous avez choisi : Jeu de donn√©es pour DataViz")
        st.write("<h3 style=;>Jeu de donn√©es pour DataViz :</h3>", unsafe_allow_html=True)
        df_viz = pd.read_csv('df_viz.csv')
        st.dataframe(df_viz.head(20), hide_index=True)
        
        if st.checkbox("Afficher le r√©sum√© descriptif") :
            st.write("")
            st.write("<h3 style=;>R√©sum√© descriptif :</h3>", unsafe_allow_html=True)
            st.write("")
            st.dataframe(df_viz.describe())
            st.write("")
    #st.write("<h3 style=;>Data Profiling :</h3>", unsafe_allow_html=True)
    #from streamlit_pandas_profiling import st_profile_report
    #import ydata_profiling
    #from ydata_profiling import ProfileReport

    #pr = df_viz.profile_report()
    #st_profile_report(pr)
    #pr = ProfileReport(df_viz, title="Pandas Profiling Report")
    #pr
        if st.checkbox("Afficher les Informations des colonnes") :
            st.write("")
            st.write("<h3 style=;>Informations des colonnes :</h3>", unsafe_allow_html=True)
            st.write("")
            import io
            # Capture the output of info()
            info_buffer = io.StringIO()
            df_viz.info(buf=info_buffer)
            info_text_viz = info_buffer.getvalue()
            # Display the output using st.text()
            st.text(info_text_viz)
            st.write("")
            
    if disply_df == 'Jeux de donn√©es pour mod√©lisation':
        st.write("")
        st.write("Vous avez choisi : Jeux de donn√©es pour mod√©lisation")
        st.write("<h3 style=;>Jeux de donn√©es pour mod√©lisation: </h3>", unsafe_allow_html=True)
        #X_train = pd.read_csv('X_train.csv')
        X_train = pd.read_csv('X_train.csv')
        y_train = pd.read_csv('y_train.csv')
        X_test = pd.read_csv('X_test.csv')
        st.write("Concernant l‚Äô√©tape de mod√©lisation nous faisons le parti pris de supprimer certaines donn√©es et d‚Äôen conserver qu‚Äôun nombre d√©fini afin d‚Äôavoir une pertinence et un r√©sultat plus affin√©.")
        st.write("Etape de pr√©paration des donn√©es √† la mod√©lisation:")
        st.write("‚û¢ S√©lection des colonnes √† conserver pour la mod√©lisation")
        st.write("‚û¢ R√©partition des donn√©es en Test et Train")
        st.write("‚û¢ Standardisation des donn√©es")
        st.write("")
        st.write("")
        st.write("Concernant ce choix nous d√©cidons de conserver les donn√©es suivantes : ")
        st.dataframe(X_train.head(), hide_index=True)
        st.write("")
    
        if st.checkbox("Afficher le r√©sum√© descriptif des donn√©es pour mod√©lisation (entra√Ænement)") :
            st.write("")
            st.write("<h3 style=;>R√©sum√© descriptif (entra√Ænement):</h3>", unsafe_allow_html=True)
            st.write("")
            st.dataframe(X_train.describe())
            st.write("")

        if st.checkbox("Afficher les Informations des colonnes (entra√Ænement)") :
            st.write("")
            st.write("<h3 style=;>Informations des colonnes (entra√Ænement):</h3>", unsafe_allow_html=True)
            st.write("")
            import io
            # Capture the output of info()
            info_buffer = io.StringIO()
            X_train.info(buf=info_buffer)
            info_text_train = info_buffer.getvalue()
            # Display the output using st.text()
            st.text(info_text_train)
            st.write("")    

        if st.checkbox("Afficher le r√©sum√© descriptif des donn√©es pour mod√©lisation (test)") :
            st.write("")
            st.write("<h3 style=;>R√©sum√© descriptif (test) :</h3>", unsafe_allow_html=True)
            st.write("")
            st.dataframe(X_test.describe())
            st.write("")
        
        if st.checkbox("Afficher les Informations des colonnes (test)") :
            st.write("")
            st.write("<h3 style=;>Informations des colonnes (test):</h3>", unsafe_allow_html=True)
            st.write("")
            import io
            # Capture the output of info()
            info_buffer = io.StringIO()
            X_test.info(buf=info_buffer)
            info_text_test = info_buffer.getvalue()
            # Display the output using st.text()
            st.text(info_text_test)
            st.write("")


elif selected == "DataViz":
    st.write("<h2 style=text-align:center;>Data visualisation</h2>", unsafe_allow_html=True)
    choix = ['G√©ographie du trafic',
             'Top 20 compteurs (moyenne horraire)',
             'Evolution du nombre de passage par jour', 
             'Comparaison du flux en fonction du jour en semaine ou week-end', 
             'R√©partition en fonction des jours de la semaine',
             'Nombre de passage de v√©lo par mois',
             'Affluence en fonction de chaque heure de la journ√©e (1 courbe par mois)'] 
             
            
    option = st.selectbox('Choix de la DataViz', choix)
    df = pd.read_csv('df_viz.csv', sep=',')
    if option == 'Evolution du nombre de passage par jour':
        st.write("Vous avez choisi : Evolution du nombre de passage par jour")
        st.image('Viz_00.png')
        st.write("Ici nous pouvons constater une √©volution non lin√©aire mais avec une constante r√©guli√®re sur cinq jours avec plusieurs jours (en semaine) avec un fort passage de v√©los sur les compteurs, et un √† deux ou les valeurs sont basses (le weekend).")
    
    elif option == 'Comparaison du flux en fonction du jour en semaine ou week-end':
        st.write("Vous avez choisi : Comparaison du flux en fonction du jour en semaine ou week-end")
        st.image('Viz_01.png')
        st.write("Sur ce graphique nous voyons clairement ce que nous pouvions penser par rapport au plot pr√©sentant le nombre de passages par jour. Nous remarquons une moyenne de 80 cyclistes par heure qui passe alors qu‚Äôen weekend nous somme √† 55 cyclistes par heure passant devant un compteur")
        #fig = plt.figure()
        #sns.catplot(x="Weekend", y='Count', kind='bar', data=df)
        #plt.title("Semaine/Weekend")
        #plt.xticks()
        #st.pyplot(fig)
        
    elif option == 'R√©partition en fonction des jours de la semaine':
        st.write("Vous avez choisi : R√©partition en fonction des jours de la semaine")
        st.image('Viz_02.png')
        st.write("Les pourcentage de r√©partition du nombre de cycliste passant sur un compteur en fonction du jour montre bien un passage plus important sur les trois jours ouvr√©s au centre d‚Äôune semaine de travail type (mardi, mercredi, jeudi sont respectivement √† 16%). Le lundi et le mardi sont quant √† eux respectivement √† 14% (une explication probable est l‚Äôutilisation plus forte du t√©l√©travail sur ces deux jours).")
        st.write("Le samedi est quant √† lui √† 12 % et le dimanche qui est un jour o√π une grande majorit√© des activit√©s sont inaccessibles est √† 9% qui peut montrer que le v√©lo est moins utilis√© lorsque nous n‚Äôavons pas besoin d‚Äôaller au travail ou faire des petites courses √† proximit√©. ")
    
    elif option == 'Nombre de passage de v√©lo par mois':
        st.write("Vous avez choisi : Nombre de passage de v√©lo par mois")
        st.image('Viz_03.png')
        st.write("Ce graphique montre la diff√©rence sur les mois en hiver (environ 4 Millions par mois de novembre √† f√©vrier). Cependant en ao√ªt, nous voyons une baisse du nombre de comptages par rapport aux mois qui l‚Äôentourent, une explication possible est les cong√©s pris sur le mois d‚Äôao√ªt par les personnes habitant sur Paris ce qui explique le fait qu‚Äôil y ait moins de passage pendant cette p√©riode.")

    elif option == 'Affluence en fonction de chaque heure de la journ√©e (1 courbe par mois)':
        st.write("Vous avez choisi : Affluence en fonction de chaque heure de la journ√©e (1 courbe par mois)")
        st.image('Viz_04.png')
        st.write("Maintenant que nous avons regard√© par p√©riode de la journ√©e, nous pouvons regarder l‚Äô√©volution heure par heure, Nous constatons donc deux pics (le matin et l‚Äôapr√®s-midi) avec entre les deux un nombre de passage par heure stable entre 10 heures et 15 heures.")
        st.write("En d√©pliant le graphique pr√©c√©dent, nous pouvons faire une comparaison de l‚Äôaffluence par heure pour chaque mois. Ici nous pouvons remarquer que qu‚Äôimporte le mois analyser nous retrouvons la m√™me tendance sur tous les mois analys√©s (deux pics avec une stabilit√© entre ces deux pics).")

    elif option == 'Top 20 compteurs (moyenne horraire)':
        st.write("Vous avez choisi : Top 20 compteurs (moyenne horraire)")
        st.image('Viz_05.png')
        st.write("En prenant le nombre moyen de passages pris en compte par les compteurs par heure, cela nous permet de faire une comparaison plus significative entre tous les compteurs en prenant en compte la date d‚Äôinstallation de chaque compteur qui peut diff√©rer et de prendre en compte √©galement le nombre de fois o√π le compteur s‚Äôactive.")  
        st.write("Sur ce graphique nous voyons donc un compteur (73 boulevard de S√©bastopol) qui est plus emprunt√© que les autres (50 passages de plus enregistr√©s par heure), les autres compteurs sur le Top 20 sont entre 100 et 200 passages par heure.")

    elif option == 'G√©ographie du trafic':
        st.write("Vous avez choisi : Graphique par arrondissement")
        st.write("")
        st.write("<h4>Situation g√©ographique des compteurs</h4>", unsafe_allow_html=True)
        st.write("")
        m = folium.Map(location = [48.856578, 2.351828], zoom_start = 12, min_zoom=10, max_zoom=15)
        Paris_Dists = gpd.read_file('arrondissements.geojson')
        Dist_mean = df.groupby(["c_ar"], as_index = False)['Count'].mean()

        Dist_mean = pd.DataFrame({"Dist" : Dist_mean["c_ar"],
                                  "Count" : Dist_mean["Count"]})
        
        m.choropleth(geo_data = Paris_Dists,
                         key_on = "feature.properties.c_ar",
                         data = Dist_mean,
                         columns = ["Dist", "Count"],
                         fill_color = "YlOrBr",
                         legend_name = "Comptage horraire par arrondissement")
        
        df_adresse = df.groupby(['Adresse','Longitude','Latitude'], as_index = False)['Count'].mean()
        for index, row in df_adresse.iterrows():
            size = row['Count']/10  # Taille du point proportionnelle au comptage
            folium.CircleMarker([row['Longitude'], row['Latitude']], radius=size, fill=True).add_to(m)
            folium.Marker(location=[row['Longitude'],row['Latitude']], popup=row['Adresse']).add_to(m)
        folium_static(m, width=1000, height=600)
        st.write("")
        st.write("Sur la cartographie de compteurs, nous pouvons √©galement visualiser, de mani√®re tr√®s pr√©cise, et comparer l‚Äôintensit√© de trafic cycliste par compteur. Nous avons constat√© que les compteurs avec le comptage horaire le plus important sont situ√©s dans les arrondissements du centre-est de Paris. Cette visualisation de pr√©cision nous permet de confirmer l‚Äôobservation plus haute selon laquelle le flux de v√©lo est concentr√© vers le centre-est de Paris. ")     
        st.write("")
        st.write("")
        st.write("<h4>Comptage horraire par arrondissement</h4>", unsafe_allow_html=True)
        st.write("")
        st.image('Viz_06.png')
        st.write("Nous avons constat√© qu‚Äôil n‚Äôy a pas de donn√©es dans le 6√®me et le 9√®me arrondissement, car il n‚Äôy a pas de compteur install√© dans ces p√©rim√®tres, comme nous pouvons voir sur la cartographie de compteur")  
        st.write("Nous avons constat√© √©galement que le flux de cyclistes est plus important dans le centre de Paris, notamment entre le 2nd et le 11√®me arrondissement. Nous avons pu √©galement constater que le flux de v√©lo est plus important vers l‚Äôest que vers l‚Äôouest.")
                
elif selected == "Mod√©lisation":
    st.write("<h2 style=text-align:center;>Mod√©lisations</h2>", unsafe_allow_html=True)
    st.write("")
    st.image('Processus de ML.jpg')
    st.write("<p style=text-align:center;>Les √©tapes de mod√©lisation</p>", unsafe_allow_html=True)
    st.write("")
    st.write("Apr√®s le pr√©-traitement de donn√©es, et avant le commencement du Machine Learning, nous avons r√©alis√© des Analyses ANOVA compl√©t√© par f-r√©gression sur nos variables pour nous permettre d‚Äôenlever les variables explicatives qui n‚Äôavaient aucune pertinence d‚Äôutilisation car elles auraient √©t√© un risque de biaiser notre r√©sultat.")
    st.write("Pour rappel, dans notre projet, le but du Machine Learning consiste √† pr√©dire les valeurs de comptage de v√©lo pour chaque compteur (variable quantitative). Notre probl√©matique est donc de l‚Äôordre de r√©gression. Pour r√©pondre √† notre probl√©matique de machine Learning, nous passons par un traitement de type r√©gression car il permet d‚Äôapprocher une variable √† partir d‚Äôautres qui lui sont corr√©l√©es.")
    st.write("En somme, nous avons donc entra√Æn√© trois mod√®les de r√©gression non-lin√©aire (Decision Tree, Random Forest Regression et KNN), trois mod√®les avanc√©s (AdaBoost Regression, XGBoost Regression, Gradient Boosting Regression) ainsi que quatre mod√®les de r√©gression lin√©aire (Linear Regression, Ridge, Lasso, ElasticNetCV).")
    st.write("")
    st.image('models.jpg')
    st.write("<p style=text-align:center;>Les mod√®les de r√©gression</p>", unsafe_allow_html=True)
    st.write("")
    st.write("Pour tester les mod√®les de r√©gression, nous avons commenc√© par entra√Æner les mod√®les lin√©aires, tels que la r√©gression lin√©aire simple, Ridge, Lasso et Elastic NetCV. Les performances sont tr√®s m√©diocres. Les scores obtenus sont autour de 0,31.")
    st.write("Nous proc√©dions ensuite √† tester les mod√®les non-lin√©aires tels que Decision Tree, Random Forest et KNN, les K plus proches voisins. Les scores sont nettement meilleurs. Par exemple, pour Random Forest, nous avons un score train de 0,92 et score test de 0,83, comme vous pouvez observer sur le tableau des r√©sultats.")
    st.write("Nous passons donc aux mod√®les boost, plus rigoureux. Parmi les 3 mod√®les boost test√©s, le mod√®le AdaBoost bas√© sur Decision Tree nous a permis d‚Äôobtenir des r√©sultats un peu meilleurs que le mod√®le Decision Tree simple. Il a boost√© le score test de 2 points, ce qui a permis de corriger l√©g√®rement le surajustement de Decision Tree. Ses scores ne sont cependant pas meilleurs que Random Forest.")
    st.write("")
    st.write("")


    st.write("<h3 style=text-align:center;>Consultez les r√©sultats de nos mod√®les entra√Æn√©s et les comparaisons</h3>", unsafe_allow_html=True)
    st.write("")
    choix_results = ["R√©sultats de l'ensemble des mod√®les entra√Æn√©s",
                     "R√©sultats des meilleurs mod√®les",
                    'Comparaison Decision Tree et Random Forest: Pr√©diction',
                    'Comparaison Decision Tree et Random Forest: Feature importances']
    
    option_results = st.selectbox('Votre choix', choix_results)
    
    if option_results =="R√©sultats de l'ensemble des mod√®les entra√Æn√©s":
        st.write("<h3 style=text-align:center;>R√©sultats de nos mod√®les entra√Æn√©s", unsafe_allow_html=True)
        st.write("")
        st.write("")
        st.image('tableau_resultats.png')
        st.write("")

    if option_results =="R√©sultats des meilleurs mod√®les":
        st.write("<h3 style=text-align:center;>R√©sultats des meilleurs mod√®les", unsafe_allow_html=True)
        st.write("Apr√®s l‚Äôanalyse des r√©sultats, nous avons fait le choix de nous focaliser sur les mod√®les Decision Tree et Random Forest Regression. Cependant les deux mod√®les pr√©sentent un effet de surajustement assez marqu√©. M√™me si les scores des deux mod√®les retenus soient tr√®s proches, l‚Äô√©cart entre les score d'entra√Ænement et de test se retrouve √™tre plus faible pour Random Forest Regression ainsi que son RMSE plus petit, nous pensons donc qu‚Äôil est l√©g√®rement sup√©rieur √† l‚Äôautre avec un effet de surajustement moins marquant.")
        st.write("")
        st.image('bests.png')
        st.write("")

    if option_results =='Comparaison Decision Tree et Random Forest: Pr√©diction':
        st.write("<h3 style=text-align:center;>Comparaison des pr√©dictions Decision Tree et Random Forest</h3>", unsafe_allow_html=True)
        st.write("Dans la comparaison de ces deux graphiques on peut clairement constater que les deux mod√®les sont extr√™mement proches dans leur r√©sultat pr√©dictif. La proximit√© des deux mod√®les se ressentira √©galement dans les features importances que nous retrouvons ci-dessous.")

# Display images side by side using st.columns()        
        image1 = "DTR_pred.png"
        image2 = "RFR_pred.png"

        col1, col2 = st.columns(2)
        with col1:
            st.image(image1, caption='Decision Tree', use_column_width=True)
        with col2:
            st.image(image2, caption='Random Forest', use_column_width=True)

    if option_results =='Comparaison Decision Tree et Random Forest: Feature importances':
        st.write("<h3 style=text-align:center;>Comparaison des variables entre Decision Tree et Random Forest</h3>", unsafe_allow_html=True)
        st.write("")

# Display images side by side using st.columns()        
        image3 = "DTR_features.png"
        image4 = "RFR_features.png"

        col1, col2 = st.columns(2)
        with col1:
            st.image(image3, caption='Decision Tree', use_column_width=True)
        with col2:
            st.image(image4, caption='Random Forest', use_column_width=True)

    st.write("")
    


elif selected == "Entra√Ænez votre mod√®le : √Ä vous de jouer !":
    t0 = time()
    st.write("")
    st.write("<h2 style=text-align:center;>√Ä vous de jouer!!</h2>", unsafe_allow_html=True)
    st.write("")
    st.write("")
    st.write("<h3 style=text-align:center;>Choisissez votre mod√®le √† entra√Æner et comparez les r√©sultats ! </h3>", unsafe_allow_html=True)
    st.write("Note: Pour cette d√©monstration, nous utilisons des donn√©es all√©g√©es pour entra√Æner les mod√®les. Les scores seront moins bons que notre entra√Ænement avec des donn√©es plus compl√®tes.")

    st.write("")
        
    
    # Chargement des donn√©es

    X_train = pd.read_csv("X_train_s.csv")
    X_test = pd.read_csv("X_test_s.csv")
    y_train = pd.read_csv("y_train_s.csv")
    y_test = pd.read_csv("y_test_s.csv")
    

    # Chargement du mod√®le
    #DecisionTreeRegression = joblib.load('DTR.joblib') 
    #AdaBoostRegression = joblib.load('DTR_ABR.joblib') 
    #RandomForestRegression = joblib.load('RFR.joblib')
    #XGBoostRegression = joblib.load('XGBR.joblib')
    #KNN = joblib.load('KNN.joblib')
    #RFR_ABR = load('RFR_ABR.joblib')
    #Mod√©lisation
    def prediction(regressor):
        if regressor == 'Decision Tree Regression':
            clf = DecisionTreeRegressor(random_state=42)
            clf.fit(X_train, y_train)
            
        elif regressor == 'Random Forest Regression':
            clf = RandomForestRegressor(random_state=42)
            #clf = RandomForestRegressor
            clf.fit(X_train, y_train)
        
        elif regressor == 'AdaBoost Regression + Decision Tree':
            DTR = DecisionTreeRegressor(random_state=42)
            clf = AdaBoostRegressor(estimator=DTR, learning_rate=0.1, n_estimators=100)
            clf.fit(X_train, y_train)
         
        elif regressor == 'XGBoost Regression':
            clf = xgb.XGBRegressor(objective='reg:squarederror', random_state=42)
            clf.fit(X_train, y_train)
        
        elif regressor == 'KNN - K-nearest neighbors':
            clf = KNeighborsRegressor(n_neighbors=3, metric='minkowski')
            clf.fit(X_train, y_train)
        
        elif regressor == 'Gradient Boosting Regression':
            #DTR = DecisionTreeRegressor(random_state=42)
            clf = GradientBoostingRegressor(random_state=42)
            clf.fit(X_train, y_train)
        
                
        return clf
    
    def scores(clf, choice):
        if choice == 'Scores':
            mae_train = mean_absolute_error(y_train, clf.predict(X_train))
            mse_train = mean_squared_error(y_train, clf.predict(X_train),squared=True)
            rmse_train = mean_squared_error(y_train, clf.predict(X_train),squared=False)
            mae_test = mean_absolute_error(y_test, clf.predict(X_test))
            mse_test = mean_squared_error(y_test, clf.predict(X_test),squared=True)
            rmse_test = mean_squared_error(y_test, clf.predict(X_test),squared=False)
            score_train = clf.score(X_train, y_train)
            score_test = clf.score(X_test, y_test)

            data = {'Score train': score_train,
                     'Score test': score_test,
                     'MAE train': mae_train,
                     'MAE test': mae_test,
                     'MSE train': mse_train,
                     'MSE test': mse_test,
                     'RMSE train': rmse_train,
                     'RMSE test': rmse_test}
            
            st.dataframe(data)
        
            #return score_train, score_test, mae_train, mse_train, rmse_train, mae_test, mse_test, rmse_test, 
            

        elif choice == 'Comparaison des valeurs r√©elles et de la pr√©diction':
            df_pred = pd.DataFrame({'Valeurs r√©elles': y_test.values.flatten(), 'Prediction': clf.predict(X_test).flatten()}).head(20)
            st.dataframe(df_pred.head(20), hide_index=True)
            #return df_pred
        
        elif choice == 'Graphique : les valeurs r√©elles vs la pr√©diction':
            pred = pd.DataFrame({'Valeurs r√©elles': y_test.values.flatten(), 'Prediction': clf.predict(X_test).flatten()})
            fig = plt.figure(figsize = (10,10))
            plt.scatter(data = pred, x = 'Prediction', y = 'Valeurs r√©elles', c='pink')

            plt.plot((y_test.min(), y_test.max()), (y_test.min(), y_test.max()), color = 'red')
            plt.xlabel("prediction")
            plt.ylabel("valeurs r√©elles")
            plt.title('Pr√©diction du mod√®le vs valeurs r√©elles')
            st.pyplot(fig)
   
    choix = ['Decision Tree Regression',
             'Random Forest Regression',  
             'KNN - K-nearest neighbors',
             'AdaBoost Regression + Decision Tree',
             'XGBoost Regression',
             'Gradient Boosting Regression']
    
    option = st.selectbox('Choix du mod√®le √† entra√Æner', choix)
    st.write('Le mod√®le choisi est :', option)

    clf = prediction(option)
    display = st.radio('Que souhaitez-vous montrer ?', ('Scores', 'Comparaison des valeurs r√©elles et de la pr√©diction', 'Graphique : les valeurs r√©elles vs la pr√©diction'))
    result = scores(clf, display)
    result
    #st.write(f"{display}: {result}")
    t1 = time()-t0
    st.write("R√©alis√© en {} secondes".format(round(t1,3)))
    


elif selected == "Interpr√©tabilit√©":
    st.write("")
    st.write("<h2 style=text-align:center;>Interpr√©tabilit√© avec SHAP</h2>", unsafe_allow_html=True)
    st.write(" ")
    st.write("Pour √©valuer l‚Äôimportance de chaque variable explicative ainsi que son influence sur notre variable cible, nous avons recours aux moyens de f-r√©gression, de la librairie SHAP et aussi l‚Äôattribut feature_importances_ des mod√®les d'entra√Ænement. Nous avons utilis√© f-r√©gression avec la corr√©lation et l‚Äôanalyse ANOVA avant la mod√©lisation pour avoir une vision de l‚Äôensemble de nos variables. Cependant, f-r√©gression, bas√©e sur l‚Äôhypoth√®se de lin√©arit√© qui mesure la relation lin√©aire entre deux variables n‚Äôest pas une m√©thode ad√©quate pour analyser nos variables car nos donn√©es sont non-lin√©aires. De ce fait, nous nous appuyons sur l‚Äôattribut feature_importances_ des mod√®les d'entra√Ænement et les m√©thodes de la librairie SHAP pour l‚Äôanalyse de l‚Äôinterpr√©tabilit√© de nos variables.")
    st.write("Nous avons s√©lectionn√© un tree_based explainer pour effectuer l‚Äôanalyse SHAP car nos donn√©es sont non-lin√©aires. Nous avons entra√Æn√© SHAP sur la base du mod√®le de Decision Tree R√©gression qui a donn√© des r√©sultats satisfaisants avec l‚Äôavantage d‚Äô√™tre plus l√©ger que le mod√®le Random Forest.")

    st.write("Compte tenu du volume de nos donn√©es (779 144 entr√©es, il faudrait plusieurs jours pour entra√Æner un mod√®le SHAP pour obtenir les valeurs SHAP), nous proc√©dons d'abord √† all√©ger les donn√©es.")
    st.write("")
    st.write("Nous pr√©levons les √©chantillons avec deux m√©thodes en guise de comparaison :")
    st.write("‚û¢	M√©thode n¬∞1 : ")
    st.write("‚óã	Pr√©lever les donn√©es de nos donn√©es d'origine (donn√©es de df) √† partir de la 6 e semaine de l‚Äôann√©e 2022 (√† partir de la 2√®me semaine du f√©vrier) puis une semaine de donn√©es √† l‚Äôespace de toutes les 5 semaines. Nous souhaitons all√©ger davantage nos donn√©es en faisant le possible pour garder une semaine de donn√©es pour chaque mois. Entre 4 et 5 semaines, nous avons choisi 5 pour all√©ger davantage, il est donc possible de manquer les donn√©es d‚Äôun mois. Il s‚Äôagit d‚Äôun compromis n√©cessaire entre la repr√©sentabilit√© d‚Äô√©chantillonnage et l‚Äôall√©gement de donn√©es.")
    st.write("")
    st.write("‚û¢	M√©thode n¬∞2 : ")
    st.write("‚óã	Pr√©lever 10 000 √©chantillons de mani√®re al√©atoire des donn√©es d'X_train avec la m√©thode d'√©chantillonnage de SHAP.")
    st.write("Finalement, les interpr√©tations sont assez similaires avec les deux m√©thodes d'√©chantillonnage, avec une l√©g√®re variation. Nous supposons cependant que le 1er √©chantillonnage qui respecte l‚Äôordre chronologique de nos donn√©es devrait repr√©senter mieux l'ensemble de nos donn√©es d'entra√Ænement. Comme nous l'avons expliqu√© plus haut, l‚Äô√©chantillonnage al√©atoire semble avoir l'incidence sur l‚Äôentra√Ænement et la pr√©diction de nos donn√©es.")
    st.write("")
    
    image5 = "SHAP_light.png"
    image6 = "SHAP_X10000.png"

    col1, col2 = st.columns(2)
    with col1:
        st.image(image5, caption='R√©sultat avec 1er √©chantillonnage', use_column_width=True)
    with col2:
        st.image(image6, caption='R√©sultat avec 2√®me √©chantillonnage (al√©atoire)', use_column_width=True)

    st.write("")
    st.write("<h2 style=text-align:center;>Interpr√©tation des variables</h2>", unsafe_allow_html=True)
    st.write("D'apr√®s les analyses SHAP, nous avons quelques remarques:")
    st.write("En premier lieu, nous avons pu constater que les variables temporelles (heure, jours de la semaine, mois) et spatiales (g√©ographiques, telles que les arrondissements, latitudes et longitudes) sont les variables les plus importantes pour nos pr√©dictions, par rapport √† d‚Äôautres types de variables tels que les √©v√®nements (gr√®ves etc.), la m√©t√©o).")
    st.write("En second lieu, parmi les variables temporelles, les variables li√©es √† l‚Äôhoraire et la p√©riode de la journ√©e sont plus importantes que celles li√©es aux jours de la semaine ou au mois. Bien que nos donn√©es semblent, en outre, manifester une certaine ¬´ saisonnalit√© ¬ª au rythme des saisons, il reste difficile pour l‚Äôalgorithme d‚Äôextraire cette saisonnalit√© sur 13 mois de donn√©es.")
    st.write("Pour finir, parmi les variables √† caract√®re spatial/g√©ographique, la latitude et l‚Äôarrondissement sont particuli√®rement importantes. Cela confirme l'observation dans notre data visualisation de la r√©partition des valeurs de comptage par arrondissement. D‚Äôapr√®s les plots que vous retrouverez sur la page suivante, le trafic de v√©lo est plus important au centre de Paris par rapport au pourtour, plut√¥t vers la rive droite (nord) que la rive gauche (sud), et plus vers l‚Äôest que l‚Äôouest. Cette d√©pendance spatiale et g√©ographie de la circulation de v√©lo est donc confirm√©e.")
    st.write("")
    st.image('Viz_07.png')
    st.write("")
    st.image('Viz_08.png')
    st.write("")
    st.write("<h5 style=text-align:center;>G√©ographie du comptage selon latitude et longitude</h5>", unsafe_allow_html=True)
    st.write("")
    st.write("")
    st.write("<h2 style=text-align:center;>Conclusion</h2>", unsafe_allow_html=True)
    st.write("Le fait que les valeurs de comptage d√©pendent des variables journali√®res semble sugg√©rer que le comptage de v√©lo est tr√®s li√© aux activit√©s quotidiennes des Parisien(nes), au rythme du travail, de l‚Äô√©tude, et probablement de loisir.")
    st.write("Ainsi, cette d√©pendance spatio-temporelle n√©cessite des analyses avanc√©es, et prendre en compte des donn√©es de la population (√¢ge, d√©mographie, revenu, profession, niveau d‚Äô√©tudes/dipl√¥mes, origine, opinion politique, etc.), des activit√©s (√©conomiques, culturelles, de loisir, √©coles et √©tablissements de l‚Äôenseignement sup√©rieur par exemples) dans les diff√©rents arrondissements. Ces donn√©es ne sont pas incluses dans notre √©tude mais notre travail et les analyses de l‚Äôinfluence des variables nous ouvrent la voie vers des √©tudes futures, plus approfondies.")
    st.write("")


elif selected == "Bilan et perspective":
    st.write("")
    st.write("<h2 style=text-align:center;>Bilan</h2>", unsafe_allow_html=True)
    
    st.write("L'objectif √©tant de comprendre l'√©volution du trafic cycliste en fonction des secteurs de la ville et des p√©riodes cl√©s, ainsi que les facteurs qui influencent le choix entre le v√©lo, la voiture et les transports en commun : ")
    st.write("  ‚û¢	Nous constatons que le trafic est plus √©lev√© la semaine que le week-end, cela s‚Äôexpliquant par l‚Äôutilisation du v√©lo pour les d√©placements au travail.")
    st.write("  ‚û¢	Depuis la p√©nurie du carburant de novembre 2022 et l‚Äôaugmentation des prix √† cette p√©riode peut expliquer une utilisation du v√©lo plus forte.")
    st.write("  ‚û¢	Nous remarquons que le nombre de v√©lo est en baisse pendant le mois d'ao√ªt, cela √©tant certainement d√ª aux d√©parts en vacances durant cette p√©riode")
    st.write("")
    st.write("")
    st.write("<h2 style=text-align:center;>Pistes d‚Äôam√©lioration</h2>", unsafe_allow_html=True)
    st.write("")
    col1, col2, col3 = st.columns([1,6,1])

    with col1:
        st.write("")

    with col2:
        st.image("amelioration.jpg")

    with col3:
        st.write("")
    
    #st.image('amelioration.jpg')
    st.write("")
    st.write("  ‚Æö	Utiliser les informations spatiales et temporelle en m√™me temps pour am√©liorer la performance :")
    st.write("      o	Etant donn√©e que nos donn√©es sont compos√©es des informations spatiales (coordonn√©es g√©ographiques, adresse, etc.) et temporelles (heure, date etc.), il sera int√©ressant d‚Äôutiliser les mod√®les qui capturent les relations spatiales et temporelles √† la fois. Nous esp√©rons pouvoir approfondir ce sujet et am√©liorer notre mod√®le dans ce sens.")
    st.write("      o	Nos donn√©es se caract√©risent par une multiple p√©riodicit√© : heure, jours de la semaine, mois, saison etc. Pour capturer la saisonnalit√© de nos donn√©es, l‚Äôid√©al est d‚Äôavoir au moins 2 cycles de 4 saisons ou 2 cycles de 12 mois. Collecter les donn√©es des mois √† venir en 2023 jusqu‚Äôau janvier 2024 pourra contribuer √† am√©liorer la capacit√© de notre mod√®le √† pr√©dire.")
    st.write("  ‚Æö   Utiliser pipeline pour entra√Æner nos mod√®les.")
